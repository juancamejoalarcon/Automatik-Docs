import { Injectable } from '@angular/core';
import { CommonsService } from '../../../../core';
import * as FormBasedDocsApi from '../../../../../assets/js/wodotexteditor/localfileeditor.js';
@Injectable()
export class DocumentCreatorService {

  public defaultUri = 'data:application/vnd.oasis.opendocument.text;base64,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aXRtYXBzL1BLAwQKAAAAAACImkhPAAAAAAAAAAAAAAAAGgAAAENvbmZpZ3VyYXRpb25zMi9wb3B1cG1lbnUvUEsDBAoAAAAAAIiaSE8AAAAAAAAAAAAAAAAaAAAAQ29uZmlndXJhdGlvbnMyL3Rvb2xwYW5lbC9QSwMECgAAAAAAiJpIT7T3aNKDAwAAgwMAAAwAAABtYW5pZmVzdC5yZGY8P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJ1dGYtOCI/Pgo8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSJzdHlsZXMueG1sIj4KICAgIDxyZGY6dHlwZSByZGY6cmVzb3VyY2U9Imh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL25zL29mZmljZS8xLjIvbWV0YS9vZGYjU3R5bGVzRmlsZSIvPgogIDwvcmRmOkRlc2NyaXB0aW9uPgogIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiPgogICAgPG5zMDpoYXNQYXJ0IHhtbG5zOm5zMD0iaHR0cDovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbnMvb2ZmaWNlLzEuMi9tZXRhL3BrZyMiIHJkZjpyZXNvdXJjZT0ic3R5bGVzLnhtbCIvPgogIDwvcmRmOkRlc2NyaXB0aW9uPgogIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSJjb250ZW50LnhtbCI+CiAgICA8cmRmOnR5cGUgcmRmOnJlc291cmNlPSJodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9ucy9vZmZpY2UvMS4yL21ldGEvb2RmI0NvbnRlbnRGaWxlIi8+CiAgPC9yZGY6RGVzY3JpcHRpb24+CiAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiI+CiAgICA8bnMwOmhhc1BhcnQgeG1sbnM6bnMwPSJodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9ucy9vZmZpY2UvMS4yL21ldGEvcGtnIyIgcmRmOnJlc291cmNlPSJjb250ZW50LnhtbCIvPgogIDwvcmRmOkRlc2NyaXB0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';

  public originalDocumentBodyClone: any;
  public currentDocumentBodyClone: any;

  constructor(
    private commonsService: CommonsService,
  ) { }

  init() {
    this.commonsService.toggleSpinner();
    this.createEditorFromURI('fillForm', 'editorContainer', this.defaultUri);
      setTimeout(() => {
        this.resizeDocumentContainer();
        window.addEventListener('resize', this.resizeDocumentContainer);
        this.originalDocumentBodyClone = document.getElementsByTagName('office:text')[0].cloneNode(true);
        this.commonsService.toggleSpinner();
      }, 5000);
  }

  createEditorFromURI(formType: string, idOfContainer: string = 'editorContainer', dataURI: string) {
    const byteString = atob(dataURI.split(',')[1]);
    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
    const ab = new ArrayBuffer(byteString.length);
    const ia = new Uint8Array(ab);
    for (let i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
    }
    const blob = new Blob([ab], {type: mimeString});
    const url = URL.createObjectURL(blob);
    window['DOCUMENTOURL'] = url;
    FormBasedDocsApi.createEditor(formType, idOfContainer);
  }

  getEditorSession() {
    return FormBasedDocsApi.getEditorSession();
  }

  resizeDocumentContainer() {
    FormBasedDocsApi.documentToFitScreen();
  }

  buildDocument(steps: any) {
    this.currentDocumentBodyClone = this.originalDocumentBodyClone.cloneNode(true);
    // 1.- Change doc structure
    this.structuralChanges(steps);
    // 2.- Change values
    this.replacements(steps);

    // document.getElementsByTagName('office:text')[0].parentElement.replaceChild(
    //   this.currentDocumentBodyClone.cloneNode(true), document.getElementsByTagName('office:text')[0]
    // );
  }
  /************************/
  /* CHANGE DOC STRUCTURE */
  /************************/
  structuralChanges(steps: any) {
    steps.forEach((step: any) => {
      if (step.type === 'iRadioC') {
        // this.buildForRadioC(step);
      } else if (step.type === 'iCheckbox') {
        // this.buildForCheckbox(step);
      } else if (step.type === 'iForEach') {
        this.buildForEach(step);
      }
    });
    document.getElementsByTagName('office:text')[0].parentElement.replaceChild(
      this.currentDocumentBodyClone.cloneNode(true), document.getElementsByTagName('office:text')[0]
    );
  }

  buildForEach(step: any) {
    step.content.forEach((content: any) => {
      const elementContainingWord = this.findword(content.wordToReplace);
      if (elementContainingWord.textContent === content.wordToReplace) {
        content.modifiedReplacements.reverse().forEach((modifiedReplacement: any, index: number) => {
          if (index) {
            console.log('pasa');
            console.log(modifiedReplacement);
            const elementContainingWordClone = elementContainingWord.cloneNode(true);
            elementContainingWord.parentNode.insertBefore(elementContainingWordClone, elementContainingWord.nextSibling);
            
            let exactElementContainingWord = elementContainingWordClone;
            while (exactElementContainingWord.firstElementChild) {
              exactElementContainingWord = exactElementContainingWord.firstElementChild
            }
            const regexp = new RegExp(step.wordToReplace, 'g');
            exactElementContainingWord.innerHTML = exactElementContainingWord.innerHTML.replace(regexp, modifiedReplacement);
          } else {
            console.log('no pasa');
            console.log(modifiedReplacement);
          }
        });

        // We do the first one after the loop is finished
        let exactElementContainingWord = elementContainingWord;
        while (exactElementContainingWord.firstElementChild) {
          exactElementContainingWord = exactElementContainingWord.firstElementChild
        }
        const regexp = new RegExp(step.wordToReplace, 'g');
        exactElementContainingWord.innerHTML = exactElementContainingWord.innerHTML.replace(regexp, content.modifiedReplacements[0]);
      }

    });
  }
  
  buildForRadioC(step: any) {
    const elementContainingWord = this.findword(step.wordToReplace);
    let replacement: string;
    step.radios.forEach((radio) => {
      if (radio.checked) {
        replacement = radio.replacement;
      }
    });
    // Case where we have just one paragraph with the wordToReplace
    if (elementContainingWord.children.length === 1) {
      elementContainingWord.firstChild.innerHTML = replacement;
    }
  }

  buildForCheckbox(step: any) {
    const elementContainingWord = this.findword(step.wordToReplace);
    let replacement = step.replacement;
    step.checkboxes.forEach((checkbox) => {
      // Check if it contains the word (rules)
      if (step.replacement.includes(checkbox.wordToReplace)) {
        if (checkbox.checked) {
          const regexp = new RegExp(checkbox.wordToReplace, 'g');
          replacement = replacement.replace(regexp, checkbox.replacement);
        } else {
          const regexp = new RegExp(checkbox.wordToReplace, 'g');
          replacement = replacement.replace(regexp, '');
        }
      }
    });
    // Case where we have just one paragraph with the wordToReplace
    if (elementContainingWord.children.length === 1) {
      elementContainingWord.firstChild.innerHTML = replacement;
    }
  }
  /*****************************/
  /*END OF CHANGE DOC STRUCTURE*/
  /*****************************/

  replacements(steps: any) {
    steps.forEach((step: any) => {
      if (step.type === 'iText') {
        const elementContainingWord = this.findword(step.wordToReplace);
        const regexp = new RegExp(step.wordToReplace, 'g');
        elementContainingWord.innerHTML =
          elementContainingWord.innerHTML
          .replace(
          regexp,
          `<span class="highlight ${step.isFocused ? 'focused' : ''}" data-identifier="${step.wordToReplace}">${step.replacement}</span>`);
      }
    });
  }

  findword(wordToReplace: string) {
    // USE ARRAY FOR ALL VALUES
    const children = this.currentDocumentBodyClone.childNodes;
    for (let i = 0; i < children.length; i++) {
      if (!this.elementIsExcluded(children[i])) {
        if (children[i].innerHTML.includes(wordToReplace)) {
          return children[i];
        }
      }
    }
  }

  elementIsExcluded(element: any) {
    const excludedElements = [
        'office:text',
        'text:sequence-decls',
        'text:sequence-decl',
        'draw:frame',
        'draw:image',
        'office:annotation',
        'office:annotation-end',
        'dc:creator',
        'dc:date'
    ];
    return excludedElements.includes(element.nodeName);
  }
}
