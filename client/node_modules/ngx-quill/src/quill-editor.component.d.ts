import { DomSanitizer } from '@angular/platform-browser';
import { QuillConfig, QuillModules } from './quill-editor.interfaces';
import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';
import { ControlValueAccessor, Validator } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export interface CustomOption {
    import: string;
    whitelist: any[];
}
export interface Range {
    index: number;
    length: number;
}
export interface ContentChange {
    content: any;
    delta: any;
    editor: any;
    html: string | null;
    oldDelta: any;
    source: string;
    text: string;
}
export interface SelectionChange {
    editor: any;
    oldRange: Range | null;
    range: Range | null;
    source: string;
}
export interface Blur {
    editor: any;
    source: string;
}
export interface Focus {
    editor: any;
    source: string;
}
export declare type EditorChangeContent = ContentChange & {
    event: 'text-change';
};
export declare type EditorChangeSelection = SelectionChange & {
    event: 'selection-change';
};
export declare class QuillEditorComponent implements AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy, Validator {
    private elementRef;
    private domSanitizer;
    private doc;
    private platformId;
    private renderer;
    private zone;
    private config;
    static normalizeClassNames(classes: string): string[];
    quillEditor: any;
    editorElem: HTMLElement | undefined;
    content: any;
    format?: 'object' | 'html' | 'text' | 'json';
    theme?: string;
    modules?: QuillModules;
    debug?: 'warn' | 'log' | 'error' | false;
    readOnly?: boolean;
    placeholder?: string;
    maxLength?: number;
    minLength?: number;
    required: boolean;
    formats?: string[] | null;
    customToolbarPosition: 'top' | 'bottom';
    sanitize: boolean;
    styles: any;
    strict: boolean;
    scrollingContainer?: HTMLElement | string | null;
    bounds?: HTMLElement | string;
    customOptions: CustomOption[];
    trackChanges?: 'user' | 'all';
    preserveWhitespace: boolean;
    classes?: string;
    trimOnValidation: boolean;
    onEditorCreated: EventEmitter<any>;
    onEditorChanged: EventEmitter<EditorChangeContent | EditorChangeSelection>;
    onContentChanged: EventEmitter<ContentChange>;
    onSelectionChanged: EventEmitter<SelectionChange>;
    onFocus: EventEmitter<Focus>;
    onBlur: EventEmitter<Blur>;
    disabled: boolean;
    constructor(elementRef: ElementRef, domSanitizer: DomSanitizer, doc: any, platformId: any, renderer: Renderer2, zone: NgZone, config: QuillConfig);
    onModelChange(_modelValue?: any): void;
    onModelTouched(): void;
    onValidatorChanged(): void;
    valueGetter: (quillEditor: any, editorElement: HTMLElement) => any;
    valueSetter: (quillEditor: any, value: any) => any;
    ngAfterViewInit(): void;
    selectionChangeHandler: (range: Range, oldRange: Range, source: string) => void;
    textChangeHandler: (delta: any, oldDelta: any, source: string) => void;
    editorChangeHandler: (event: "text-change" | "selection-change", current: any, old: any, source: string) => void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    addClasses(classList: string): void;
    removeClasses(classList: string): void;
    writeValue(currentValue: any): void;
    setDisabledState(isDisabled?: boolean): void;
    registerOnChange(fn: (modelValue: any) => void): void;
    registerOnTouched(fn: () => void): void;
    registerOnValidatorChange(fn: () => void): void;
    validate(): {
        minLengthError?: {
            given: number;
            minLength: number;
        };
        maxLengthError?: {
            given: number;
            maxLength: number;
        };
        requiredError?: {
            empty: boolean;
        };
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<QuillEditorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<QuillEditorComponent, "quill-editor", never, { "required": "required"; "customToolbarPosition": "customToolbarPosition"; "sanitize": "sanitize"; "styles": "styles"; "strict": "strict"; "customOptions": "customOptions"; "preserveWhitespace": "preserveWhitespace"; "trimOnValidation": "trimOnValidation"; "valueGetter": "valueGetter"; "valueSetter": "valueSetter"; "format": "format"; "theme": "theme"; "modules": "modules"; "debug": "debug"; "readOnly": "readOnly"; "placeholder": "placeholder"; "maxLength": "maxLength"; "minLength": "minLength"; "formats": "formats"; "scrollingContainer": "scrollingContainer"; "bounds": "bounds"; "trackChanges": "trackChanges"; "classes": "classes"; }, { "onEditorCreated": "onEditorCreated"; "onEditorChanged": "onEditorChanged"; "onContentChanged": "onContentChanged"; "onSelectionChanged": "onSelectionChanged"; "onFocus": "onFocus"; "onBlur": "onBlur"; }, never, ["[quill-editor-toolbar]"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbGwtZWRpdG9yLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJxdWlsbC1lZGl0b3IuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBRdWlsbENvbmZpZywgUXVpbGxNb2R1bGVzIH0gZnJvbSAnLi9xdWlsbC1lZGl0b3IuaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmV4cG9ydCBpbnRlcmZhY2UgQ3VzdG9tT3B0aW9uIHtcbiAgICBpbXBvcnQ6IHN0cmluZztcbiAgICB3aGl0ZWxpc3Q6IGFueVtdO1xufVxuZXhwb3J0IGludGVyZmFjZSBSYW5nZSB7XG4gICAgaW5kZXg6IG51bWJlcjtcbiAgICBsZW5ndGg6IG51bWJlcjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQ29udGVudENoYW5nZSB7XG4gICAgY29udGVudDogYW55O1xuICAgIGRlbHRhOiBhbnk7XG4gICAgZWRpdG9yOiBhbnk7XG4gICAgaHRtbDogc3RyaW5nIHwgbnVsbDtcbiAgICBvbGREZWx0YTogYW55O1xuICAgIHNvdXJjZTogc3RyaW5nO1xuICAgIHRleHQ6IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0aW9uQ2hhbmdlIHtcbiAgICBlZGl0b3I6IGFueTtcbiAgICBvbGRSYW5nZTogUmFuZ2UgfCBudWxsO1xuICAgIHJhbmdlOiBSYW5nZSB8IG51bGw7XG4gICAgc291cmNlOiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIEJsdXIge1xuICAgIGVkaXRvcjogYW55O1xuICAgIHNvdXJjZTogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBGb2N1cyB7XG4gICAgZWRpdG9yOiBhbnk7XG4gICAgc291cmNlOiBzdHJpbmc7XG59XG5leHBvcnQgZGVjbGFyZSB0eXBlIEVkaXRvckNoYW5nZUNvbnRlbnQgPSBDb250ZW50Q2hhbmdlICYge1xuICAgIGV2ZW50OiAndGV4dC1jaGFuZ2UnO1xufTtcbmV4cG9ydCBkZWNsYXJlIHR5cGUgRWRpdG9yQ2hhbmdlU2VsZWN0aW9uID0gU2VsZWN0aW9uQ2hhbmdlICYge1xuICAgIGV2ZW50OiAnc2VsZWN0aW9uLWNoYW5nZSc7XG59O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUXVpbGxFZGl0b3JDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFZhbGlkYXRvciB7XG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmO1xuICAgIHByaXZhdGUgZG9tU2FuaXRpemVyO1xuICAgIHByaXZhdGUgZG9jO1xuICAgIHByaXZhdGUgcGxhdGZvcm1JZDtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgem9uZTtcbiAgICBwcml2YXRlIGNvbmZpZztcbiAgICBzdGF0aWMgbm9ybWFsaXplQ2xhc3NOYW1lcyhjbGFzc2VzOiBzdHJpbmcpOiBzdHJpbmdbXTtcbiAgICBxdWlsbEVkaXRvcjogYW55O1xuICAgIGVkaXRvckVsZW06IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkO1xuICAgIGNvbnRlbnQ6IGFueTtcbiAgICBmb3JtYXQ/OiAnb2JqZWN0JyB8ICdodG1sJyB8ICd0ZXh0JyB8ICdqc29uJztcbiAgICB0aGVtZT86IHN0cmluZztcbiAgICBtb2R1bGVzPzogUXVpbGxNb2R1bGVzO1xuICAgIGRlYnVnPzogJ3dhcm4nIHwgJ2xvZycgfCAnZXJyb3InIHwgZmFsc2U7XG4gICAgcmVhZE9ubHk/OiBib29sZWFuO1xuICAgIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICAgIG1heExlbmd0aD86IG51bWJlcjtcbiAgICBtaW5MZW5ndGg/OiBudW1iZXI7XG4gICAgcmVxdWlyZWQ6IGJvb2xlYW47XG4gICAgZm9ybWF0cz86IHN0cmluZ1tdIHwgbnVsbDtcbiAgICBjdXN0b21Ub29sYmFyUG9zaXRpb246ICd0b3AnIHwgJ2JvdHRvbSc7XG4gICAgc2FuaXRpemU6IGJvb2xlYW47XG4gICAgc3R5bGVzOiBhbnk7XG4gICAgc3RyaWN0OiBib29sZWFuO1xuICAgIHNjcm9sbGluZ0NvbnRhaW5lcj86IEhUTUxFbGVtZW50IHwgc3RyaW5nIHwgbnVsbDtcbiAgICBib3VuZHM/OiBIVE1MRWxlbWVudCB8IHN0cmluZztcbiAgICBjdXN0b21PcHRpb25zOiBDdXN0b21PcHRpb25bXTtcbiAgICB0cmFja0NoYW5nZXM/OiAndXNlcicgfCAnYWxsJztcbiAgICBwcmVzZXJ2ZVdoaXRlc3BhY2U6IGJvb2xlYW47XG4gICAgY2xhc3Nlcz86IHN0cmluZztcbiAgICB0cmltT25WYWxpZGF0aW9uOiBib29sZWFuO1xuICAgIG9uRWRpdG9yQ3JlYXRlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25FZGl0b3JDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8RWRpdG9yQ2hhbmdlQ29udGVudCB8IEVkaXRvckNoYW5nZVNlbGVjdGlvbj47XG4gICAgb25Db250ZW50Q2hhbmdlZDogRXZlbnRFbWl0dGVyPENvbnRlbnRDaGFuZ2U+O1xuICAgIG9uU2VsZWN0aW9uQ2hhbmdlZDogRXZlbnRFbWl0dGVyPFNlbGVjdGlvbkNoYW5nZT47XG4gICAgb25Gb2N1czogRXZlbnRFbWl0dGVyPEZvY3VzPjtcbiAgICBvbkJsdXI6IEV2ZW50RW1pdHRlcjxCbHVyPjtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBkb21TYW5pdGl6ZXI6IERvbVNhbml0aXplciwgZG9jOiBhbnksIHBsYXRmb3JtSWQ6IGFueSwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgem9uZTogTmdab25lLCBjb25maWc6IFF1aWxsQ29uZmlnKTtcbiAgICBvbk1vZGVsQ2hhbmdlKF9tb2RlbFZhbHVlPzogYW55KTogdm9pZDtcbiAgICBvbk1vZGVsVG91Y2hlZCgpOiB2b2lkO1xuICAgIG9uVmFsaWRhdG9yQ2hhbmdlZCgpOiB2b2lkO1xuICAgIHZhbHVlR2V0dGVyOiAocXVpbGxFZGl0b3I6IGFueSwgZWRpdG9yRWxlbWVudDogSFRNTEVsZW1lbnQpID0+IGFueTtcbiAgICB2YWx1ZVNldHRlcjogKHF1aWxsRWRpdG9yOiBhbnksIHZhbHVlOiBhbnkpID0+IGFueTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBzZWxlY3Rpb25DaGFuZ2VIYW5kbGVyOiAocmFuZ2U6IFJhbmdlLCBvbGRSYW5nZTogUmFuZ2UsIHNvdXJjZTogc3RyaW5nKSA9PiB2b2lkO1xuICAgIHRleHRDaGFuZ2VIYW5kbGVyOiAoZGVsdGE6IGFueSwgb2xkRGVsdGE6IGFueSwgc291cmNlOiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgZWRpdG9yQ2hhbmdlSGFuZGxlcjogKGV2ZW50OiBcInRleHQtY2hhbmdlXCIgfCBcInNlbGVjdGlvbi1jaGFuZ2VcIiwgY3VycmVudDogYW55LCBvbGQ6IGFueSwgc291cmNlOiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBhZGRDbGFzc2VzKGNsYXNzTGlzdDogc3RyaW5nKTogdm9pZDtcbiAgICByZW1vdmVDbGFzc2VzKGNsYXNzTGlzdDogc3RyaW5nKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKGN1cnJlbnRWYWx1ZTogYW55KTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ/OiBib29sZWFuKTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAobW9kZWxWYWx1ZTogYW55KSA9PiB2b2lkKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblZhbGlkYXRvckNoYW5nZShmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgdmFsaWRhdGUoKToge1xuICAgICAgICBtaW5MZW5ndGhFcnJvcj86IHtcbiAgICAgICAgICAgIGdpdmVuOiBudW1iZXI7XG4gICAgICAgICAgICBtaW5MZW5ndGg6IG51bWJlcjtcbiAgICAgICAgfTtcbiAgICAgICAgbWF4TGVuZ3RoRXJyb3I/OiB7XG4gICAgICAgICAgICBnaXZlbjogbnVtYmVyO1xuICAgICAgICAgICAgbWF4TGVuZ3RoOiBudW1iZXI7XG4gICAgICAgIH07XG4gICAgICAgIHJlcXVpcmVkRXJyb3I/OiB7XG4gICAgICAgICAgICBlbXB0eTogYm9vbGVhbjtcbiAgICAgICAgfTtcbiAgICB9O1xufVxuIl19